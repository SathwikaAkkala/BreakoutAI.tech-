# -*- coding: utf-8 -*-
"""Function_1(get_option_chain_data)&Function_2(calculate_margin_and_premium)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w-7hBMkDCG4txttKw2lijDDRiglDItJZ

**Overview:**
This project is part of the BreakoutAI Python Development Internship assessment. The main goal is to retrieve options trading data from an API, process it to find specific values, and perform calculations related to options trading. The document includes the code for two functions:

get_option_chain_data(): Fetches and filters options chain data.
calculate_margin_and_premium(): Calculates margin requirements and premiums based on data from the first function.
Both functions are designed to use API integration, data processing, and error handling. AI was used to assist in structuring code and clarifying financial calculations.
"""

import pandas as pd
import requests  # Make sure you have requests library installed

# Function to retrieve option chain data (placeholder for actual API call)
def get_option_chain_data(instrument_name: str, expiry_date: str, side: str) -> pd.DataFrame:
    """
    Placeholder function to demonstrate data structure; this would normally
    make an API call and return data in a DataFrame.
    """
    # For demonstration, manually returning a sample DataFrame
    return pd.DataFrame({
        "instrument_name": [instrument_name] * 2,
        "strike_price": [19500, 20000],
        "side": ["PE", "CE"],
        "bid/ask": [0.65, 2302.25]
    })

# Function to calculate margin and premium
def calculate_margin_and_premium(data: pd.DataFrame) -> pd.DataFrame:
    """
    Adds margin_required and premium_earned columns to the DataFrame.
    Here, margin_required values are placeholders for demonstration.
    """
    # Placeholder values for demonstration; in real use, these come from an API.
    lot_size = 50  # Assuming each option contract has a lot size of 50
    margin_required = [1950, 10000]  # Dummy values for margin, replace with real API response logic

    # Calculate premium earned based on lot size
    premium_earned = [price * lot_size for price in data["bid/ask"]]

    # Add columns to DataFrame
    data["margin_required"] = margin_required
    data["premium_earned"] = premium_earned

    return data

# Sample data for testing (provided manually here as get_option_chain_data output)
sample_data = pd.DataFrame({
    "instrument_name": ["NIFTY", "NIFTY"],
    "strike_price": [19500, 20000],
    "side": ["PE", "CE"],
    "bid/ask": [0.65, 2302.25]
})

# Calculate margin and premium based on sample data
result_data = calculate_margin_and_premium(sample_data)

# Display result
print(result_data)